@model Graduation_Project.ViewModels.CheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
}
@Html.AntiForgeryToken()

<div class="container my-5 checkout-section">
    <h2 class="text-center mb-4">Checkout</h2>

    <!-- Error/Success Message Placeholder -->
    <div id="checkoutMessage" class="alert d-none" role="alert"></div>

    @if (Model == null || Model.Cart == null || Model.Cart.CartItems == null || !Model.Cart.CartItems.Any())
    {
        <div class="col-12 text-center text-muted empty-cart">
            <p>Your cart is empty.</p>
            <a href="@Url.Action("Index", "Home")" class="btn btn-primary">Continue Shopping</a>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Order Summary -->
            <div class="col-md-8">
                <div class="card mb-4 shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th class="text-end">Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Cart.CartItems)
                                {
                                    <tr>
                                        <td>@item.Product.Name</td>
                                        <td>@item.Product.Price.ToString("C")</td>
                                        <td>@item.Quantity</td>
                                        <td class="text-end">@((item.Quantity * item.Product.Price).ToString("C"))</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Subtotal:</strong></td>
                                    <td class="text-end">@Model.Cart.CartItems.Sum(item => item.Quantity * item.Product.Price).ToString("C")</td>
                                </tr>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Shipping:</strong></td>
                                    <td class="text-end">Free</td>
                                </tr>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                                    <td class="text-end"><strong>@Model.Cart.CartItems.Sum(item => item.Quantity * item.Product.Price).ToString("C")</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Shipping Address -->
            <div class="col-md-4">
                <div class="card shadow-sm" style="z-index:10000;,opacity: 1;">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">Shipping Address</h5>
                    </div>
                    <div class="card-body">
                        @if (Model.Addresses == null || !Model.Addresses.Any())
                        {
                            <div class="alert alert-warning">
                                <p>You don't have any saved addresses.</p>
                                <a href="@Url.Action("Create", "Address")" class="btn btn-primary btn-sm mt-2">Add New Address</a>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <label class="form-label">Select a shipping address:</label>
                                <div id="addressList">
                                    @foreach (var address in Model.Addresses)
                                    {
                                        <div class="card mb-2 address-card @(address.IsDefault ? "border-primary" : "")">
                                            <div class="card-body">
                                                <div class="form-check">
                                                    <input class="form-check-input address-radio" type="radio" name="addressId"
                                                           id="address-@address.AddressId" value="@address.AddressId"
                                                    @(address.IsDefault ? "checked" : "")>
                                                    <label class="form-check-label" for="address-@address.AddressId">
                                                        <strong>@address.FullName</strong><br>
                                                        @address.StreetAddress
                                                        @if (!string.IsNullOrEmpty(address.ApartmentNumber))
                                                        {
                                                            <span>, @address.ApartmentNumber</span>
                                                        }<br>
                                                        @address.City, @address.State @address.PostalCode<br>
                                                        @address.Country<br>
                                                        <span class="text-muted">@address.PhoneNumber</span>
                                                        @if (address.IsDefault)
                                                        {
                                                            <span class="badge bg-primary ms-2">Default</span>
                                                        }
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="mt-3">
                                    <a href="@Url.Action("Create", "Address")" class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-plus-circle"></i> Add New Address
                                    </a>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="d-grid gap-2 mt-4">
                    <a href="@Url.Action("Index", "Cart")" class="btn btn-outline-secondary">Back to Cart</a>
                    <button id="confirmOrderBtn" class="btn btn-primary" @(Model.Addresses == null || !Model.Addresses.Any() ? "disabled" : "")>
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Style the selected address card
            $('.address-radio').on('change', function() {
                $('.address-card').removeClass('border-primary');
                $(this).closest('.address-card').addClass('border-primary');
            });

            $('#confirmOrderBtn').on('click', function () {
                var messageDiv = $('#checkoutMessage');
                var selectedAddressId = $('input[name="addressId"]:checked').val();
                var $btn = $(this);

                // Confirmation popup before proceeding
                if (!confirm('Are you sure you want to place this order?')) {
                    return;
                }

                // Validate address selection
                if (!selectedAddressId) {
                    messageDiv.removeClass('alert-success d-none').addClass('alert-danger')
                        .text('Please select a shipping address before placing your order.');
                    setTimeout(() => messageDiv.addClass('d-none'), 3000);
                    return;
                }

                // Show loading state
                $btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...');

                $.ajax({
                    url: '@Url.Action("ConfirmOrder", "Cart")',
                    type: 'POST',
                    data: {
                        addressId: selectedAddressId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            messageDiv.removeClass('alert-danger d-none').addClass('alert-success').text(response.message);
                            setTimeout(() => {
                                messageDiv.addClass('d-none');
                                window.location.href = response.redirectUrl || '@Url.Action("Profile", "Account")';
                            }, 1500);
                        } else {
                            messageDiv.removeClass('alert-success d-none').addClass('alert-danger').text(response.message);
                            setTimeout(() => messageDiv.addClass('d-none'), 3000);
                            $btn.prop('disabled', false).html('Place Order');
                        }
                    },
                    error: function (xhr, status, error) {
                        var errorMessage = 'An error occurred. Please try again.';
                        try {
                            var response = JSON.parse(xhr.responseText);
                            if (response && response.message) {
                                errorMessage = response.message;
                            }
                        } catch (e) {
                            console.error("Error parsing response:", e);
                        }

                        messageDiv.removeClass('alert-success d-none').addClass('alert-danger').text(errorMessage);
                        setTimeout(() => messageDiv.addClass('d-none'), 3000);
                        $btn.prop('disabled', false).html('Place Order');
                    }
                });
            });
        });
    </script>
}

<style>
    /* Checkout Section */
    .checkout-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: calc(100vh - 60px);
        padding: 0 15px;
    }

    h2 {
        font-size: 2rem;
        font-weight: 600;
        color: #333;
    }

    /* Empty Cart Message */
    .empty-cart {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 300px;
    }

        .empty-cart p {
            font-size: 1.2rem;
            margin-bottom: 20px;
        }

    /* Cards */
    .card {
        border: none;
        border-radius: 10px;
        background: #fff;
        transition: box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }

    .card-header {
        border-bottom: 1px solid #e9ecef;
        padding: 15px 20px;
        background: #f8f9fa;
    }

    .card-body {
        padding: 20px;
    }

    /* Table Styling */
    .table {
        margin-bottom: 0;
    }

        .table th, .table td {
            vertical-align: middle;
            padding: 12px;
        }

        .table thead th {
            font-weight: 600;
            color: #333;
            border-bottom: 2px solid #e9ecef;
        }

        .table tbody tr:hover {
            background-color: #f8f9fa;
        }

        .table tfoot {
            font-weight: 600;
        }

    /* Address Cards */
    .address-card {
        border: 1px solid #e9ecef;
        border-radius: 5px;
        transition: border-color 0.3s ease;
    }

        .address-card.border-primary {
            border-color: #0d6efd;
            box-shadow: 0 0 5px rgba(13, 110, 253, 0.3);
        }

    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .form-check-label {
        font-size: 0.9rem;
        color: #333;
    }

    .badge.bg-primary {
        font-size: 0.75rem;
    }

    /* Alerts */
    #checkoutMessage {
        margin-top: 10px;
        text-align: center;
        width: 100%;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
        border-radius: 5px;
        padding: 15px;
        font-size: 0.9rem;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .alert-warning {
        background-color: #fff3cd;
        color: #856404;
    }

    /* Buttons */
    .btn {
        border-radius: 5px;
        padding: 8px 16px;
        transition: transform 0.2s ease, background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

        .btn-primary:hover {
            background-color: #005cbf;
            border-color: #005cbf;
        }

    .btn-outline-primary {
        border-color: #0d6efd;
        color: #0d6efd;
    }

        .btn-outline-primary:hover {
            background-color: #0d6efd;
            color: #fff;
        }

    .btn-outline-secondary {
        border-color: #6c757d;
        color: #6c757d;
    }

        .btn-outline-secondary:hover {
            background-color: #6c757d;
            color: #fff;
        }

  
</style>

<script>
    // Add click animation for buttons
    document.querySelectorAll('.btn').forEach(button => {
        button.addEventListener('click', () => {
            button.style.transform = 'scale(0.95)';
            setTimeout(() => {
                button.style.transform = 'scale(1)';
            }, 100);
        });
    });

    // Add hover effect for address cards
    document.querySelectorAll('.address-card').forEach(card => {
        card.addEventListener('mouseenter', () => {
            if (!card.classList.contains('border-primary')) {
                card.style.borderColor = '#ced4da';
            }
        });
        card.addEventListener('mouseleave', () => {
            if (!card.classList.contains('border-primary')) {
                card.style.borderColor = '#e9ecef';
            }
        });
    });
</script>