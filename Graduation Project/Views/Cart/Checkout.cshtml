@model Graduation_Project.ViewModels.CheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
    Layout = "_Layout";
}
@Html.AntiForgeryToken()

@section Styles {
    <link rel="stylesheet" href="~/css/account.css" />
    <style>
        /* Fresh Checkout Design Styles */
        .checkout-wrapper {
            min-height: 80vh;
            position: relative;
            padding-top: 30px;
            padding-bottom: 50px;
        }
        
        .checkout-wrapper::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 280px;
            background-color: var(--brand-primary-lightest);
            z-index: -1;
        }
        
        .checkout-header {
            text-align: center;
            margin-bottom: 30px;
            position: relative;
        }
        
        .checkout-header h1 {
            font-size: 2.2rem;
            font-weight: 700;
            color: var(--brand-primary);
            margin-bottom: 15px;
        }
        
        .checkout-header p {
            color: var(--text-medium);
            font-size: 1.1rem;
            max-width: 600px;
            margin: 0 auto;
        }
        
        .checkout-progress {
            display: flex;
            justify-content: center;
            margin-bottom: 40px;
        }
        
        .progress-step {
            display: flex;
            align-items: center;
            position: relative;
        }
        
        .progress-step:not(:last-child)::after {
            content: '';
            position: absolute;
            right: -35px;
            top: 50%;
            height: 2px;
            width: 70px;
            background-color: #e0e0e0;
            transform: translateY(-50%);
        }
        
        .progress-step.active:not(:last-child)::after {
            background-color: var(--brand-primary-light);
        }
        
        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e0e0e0;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 10px;
            transition: all 0.3s ease;
        }
        
        .progress-step.active .step-number {
            background-color: var(--brand-primary);
        }
        
        .step-label {
            font-weight: 500;
            color: var(--text-medium);
            transition: all 0.3s ease;
        }
        
        .progress-step.active .step-label {
            color: var(--brand-primary);
            font-weight: 600;
        }
        
        .checkout-container {
            display: flex;
            gap: 30px;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .checkout-main {
            flex: 2;
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--card-shadow);
            overflow: hidden;
        }
        
        .checkout-sidebar {
            flex: 1;
            height: fit-content;
        }
        
        .checkout-card {
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--card-shadow);
            margin-bottom: 20px;
            overflow: hidden;
            transition: var(--transition-smooth);
        }
        
        .checkout-card:hover {
            box-shadow: var(--card-shadow-hover);
        }
        
        .card-section {
            padding: 25px;
        }
        
        .card-section:not(:last-child) {
            border-bottom: 1px solid #f0f0f0;
        }
        
        .section-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .section-title i {
            font-size: 1.4rem;
            color: var(--brand-primary);
        }
        
        /* Product List */
        .product-list {
            margin-bottom: 15px;
        }
        
        .product-item {
            display: flex;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .product-item:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }
        
        .product-image {
            width: 70px;
            height: 70px;
            border-radius: var(--border-radius-sm);
            overflow: hidden;
            margin-right: 15px;
            background-color: #f9f9f9;
            flex-shrink: 0;
        }
        
        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .product-details {
            flex-grow: 1;
        }
        
        .product-name {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-dark);
        }
        
        .product-price {
            display: flex;
            justify-content: space-between;
            color: var(--text-medium);
            font-size: 0.95rem;
        }
        
        .product-quantity {
            color: var(--text-light);
            font-size: 0.85rem;
        }
        
        /* Order Summary */
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
        }
        
        .summary-label {
            color: var(--text-medium);
        }
        
        .summary-value {
            font-weight: 500;
            color: var(--text-dark);
        }
        
        .summary-total {
            font-size: 1.1rem;
            font-weight: 700;
            color: var(--brand-primary);
            margin-top: 15px;
            padding-top: 15px;
            border-top: 2px solid var(--brand-primary-lightest);
        }
        
        /* Address Selection */
        .address-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .address-card {
            border: 1px solid #e0e0e0;
            border-radius: var(--border-radius-md);
            padding: 15px;
            transition: var(--transition-smooth);
            position: relative;
            padding-left: 45px;
        }
        
        .address-card:hover {
            border-color: var(--brand-primary-light);
            background-color: var(--brand-primary-lightest);
        }
        
        .address-card.selected {
            border: 2px solid var(--brand-primary);
            background-color: var(--brand-primary-lightest);
        }
        
        .address-radio {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
        }
        
        .address-radio:checked {
            background-color: var(--brand-primary);
            border-color: var(--brand-primary);
        }
        
        .address-title {
            font-weight: 600;
            margin-bottom: 5px;
            color: var(--text-dark);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .address-details {
            color: var(--text-medium);
            font-size: 0.9rem;
            line-height: 1.4;
        }
        
        .address-badge {
            font-size: 0.7rem;
            padding: 2px 8px;
            border-radius: 10px;
            background-color: var(--brand-primary-light);
            color: white;
        }
        
        .add-address-btn {
            margin-top: 15px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            color: var(--brand-primary);
            font-weight: 500;
            text-decoration: none;
            transition: var(--transition-smooth);
        }
        
        .add-address-btn:hover {
            color: var(--brand-primary-dark);
            text-decoration: underline;
        }
        
        /* Empty State */
        .empty-checkout {
            text-align: center;
            padding: 60px 30px;
            background-color: white;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--card-shadow);
        }
        
        .empty-checkout-icon {
            font-size: 5rem;
            color: var(--brand-primary-light);
            margin-bottom: 20px;
            opacity: 0.7;
        }
        
        .empty-checkout-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 10px;
        }
        
        .empty-checkout-text {
            color: var(--text-medium);
            margin-bottom: 25px;
            max-width: 450px;
            margin-left: auto;
            margin-right: auto;
        }
        
        /* Checkout Actions */
        .checkout-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
        }
        
        .btn-checkout {
            padding: 12px 25px;
            font-weight: 600;
            font-size: 1rem;
        }
        
        /* Media Queries */
      
        
        /* Alert Messages */
        .checkout-alert {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 9999;
            min-width: 300px;
            max-width: 450px;
            padding: 15px 20px;
            border-radius: var(--border-radius-md);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            display: flex;
            align-items: center;
            gap: 15px;
            opacity: 0;
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
        .checkout-alert.show {
            opacity: 1;
            transform: translateX(-50%) translateY(10px);
        }
        
        .checkout-alert.alert-success {
            background-color: #d4edda;
            color: #155724;
        }
        
        .checkout-alert.alert-danger {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .checkout-alert.alert-warning {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .checkout-alert-icon {
            font-size: 1.5rem;
        }
        
        .checkout-alert-content {
            flex-grow: 1;
        }
        
        .checkout-alert-close {
            background: none;
            border: none;
            color: inherit;
            font-size: 1.2rem;
            cursor: pointer;
            opacity: 0.7;
            transition: opacity 0.2s ease;
        }
        
        .checkout-alert-close:hover {
            opacity: 1;
        }
    </style>
}

<div class="checkout-wrapper">
    <div id="checkoutAlert" class="checkout-alert">
        <div class="checkout-alert-icon">
            <i class="bi bi-exclamation-circle"></i>
        </div>
        <div class="checkout-alert-content">
            <div id="alertMessage"></div>
        </div>
        <button type="button" class="checkout-alert-close" onclick="closeAlert()">
            <i class="bi bi-x"></i>
        </button>
    </div>

    <div class="checkout-header">
        <h1>Complete Your Order</h1>
        <p>You're just a few steps away from completing your purchase.</p>
    </div>

    <div class="checkout-progress">
        <div class="progress-step active">
            <div class="step-number">1</div>
            <div class="step-label">Cart</div>
        </div>
        <div class="progress-step active">
            <div class="step-number">2</div>
            <div class="step-label">Checkout</div>
        </div>
        <div class="progress-step">
            <div class="step-number">3</div>
            <div class="step-label">Confirmation</div>
        </div>
    </div>

    @if (Model == null || Model.Cart == null || Model.Cart.CartItems == null || !Model.Cart.CartItems.Any())
    {
        <div class="container">
            <div class="empty-checkout">
                <i class="bi bi-cart-x empty-checkout-icon"></i>
                <h2 class="empty-checkout-title">Your Shopping Cart is Empty</h2>
                <p class="empty-checkout-text">Looks like you haven't added anything to your cart yet. Browse our products and find something you'll love!</p>
                <a href="@Url.Action("Shop", "Home")" class="btn btn-brand btn-lg">Start Shopping</a>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <div class="checkout-container">
                <div class="checkout-main">
                    <div class="checkout-card">
                        <div class="card-section">
                            <h2 class="section-title">
                                <i class="bi bi-geo-alt"></i>
                                Shipping Address
                            </h2>
                            
                            @if (Model.Addresses == null || !Model.Addresses.Any())
                            {
                                <div class="status-banner">
                                    <div class="status-banner-content">
                                        <div class="status-banner-icon">
                                            <i class="bi bi-geo-alt"></i>
                                        </div>
                                        <div class="status-banner-text">
                                            <p>You need to add an address before you can complete your order.</p>
                                        </div>
                                    </div>
                                    <div class="status-banner-action">
                                        <a href="@Url.Action("Create", "Address")" class="btn btn-brand">
                                            <i class="bi bi-plus-circle"></i> Add Address
                                        </a>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="address-list">
                                    @foreach (var address in Model.Addresses)
                                    {
                                        <div class="address-card @(address.IsDefault ? "selected" : "")">
                                            <input type="radio" name="addressId" id="address-@address.AddressId" 
                                                   value="@address.AddressId" class="form-check-input address-radio"
                                                   @(address.IsDefault ? "checked" : "")>
                                            <label for="address-@address.AddressId" class="w-100">
                                                <div class="address-title">
                                                    @address.FullName
                                                    @if (address.IsDefault)
                                                    {
                                                        <span class="address-badge">Default</span>
                                                    }
                                                </div>
                                                <div class="address-details">
                                                    @address.StreetAddress
                                                    @if (!string.IsNullOrEmpty(address.ApartmentNumber))
                                                    {
                                                        <span>, @address.ApartmentNumber</span>
                                                    }<br>
                                                    @address.City, @address.State @address.PostalCode<br>
                                                    @address.Country<br>
                                                    <span class="text-muted">@address.PhoneNumber</span>
                                                </div>
                                            </label>
                                        </div>
                                    }
                                </div>
                                
                                <a href="@Url.Action("Create", "Address")" class="add-address-btn">
                                    <i class="bi bi-plus-circle"></i> Add New Address
                                </a>
                            }
                        </div>
                        
                        <div class="card-section">
                            <h2 class="section-title">
                                <i class="bi bi-credit-card"></i>
                                Payment Method
                            </h2>
                            
                            <div class="payment-method">
                                <div class="form-check mb-3">
                                    <input class="form-check-input" type="radio" name="paymentMethod" id="cashOnDelivery" checked>
                                    <label class="form-check-label" for="cashOnDelivery">
                                        <div class="d-flex align-items-center gap-2">
                                            <i class="bi bi-cash"></i>
                                            Cash on Delivery
                                        </div>
                                    </label>
                                </div>
                                <p class="text-muted small">
                                    Pay with cash when your order is delivered to your address.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="checkout-sidebar">
                    <div class="checkout-card">
                        <div class="card-section">
                            <h2 class="section-title">
                                <i class="bi bi-bag"></i>
                                Order Summary
                            </h2>
                            
                            <div class="product-list">
                                @foreach (var item in Model.Cart.CartItems)
                                {
                                    <div class="product-item">
                                        <div class="product-image">
                                            @if (!string.IsNullOrEmpty(item.Product.ImageUrl))
                                            {
                                                <img src="@item.Product.ImageUrl" alt="@item.Product.Name">
                                            }
                                            else
                                            {
                                                <div class="d-flex align-items-center justify-content-center h-100">
                                                    <i class="bi bi-image text-muted"></i>
                                                </div>
                                            }
                                        </div>
                                        <div class="product-details">
                                            <div class="product-name">@item.Product.Name</div>
                                            <div class="product-price">
                                                <span class="product-quantity">Qty: @item.Quantity</span>
                                                <span>$@((item.Quantity * item.Product.Price).ToString("F2"))</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            <div class="order-summary">
                                <div class="summary-row">
                                    <div class="summary-label">Subtotal</div>
                                    <div class="summary-value">$@Model.Cart.CartItems.Sum(item => item.Quantity * item.Product.Price).ToString("F2")</div>
                                </div>
                                <div class="summary-row">
                                    <div class="summary-label">Shipping</div>
                                    <div class="summary-value">Free</div>
                                </div>
                                <div class="summary-row summary-total">
                                    <div class="summary-label">Total</div>
                                    <div class="summary-value">$@Model.Cart.CartItems.Sum(item => item.Quantity * item.Product.Price).ToString("F2")</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="checkout-card">
                        <div class="card-section">
                            <div class="checkout-actions">
                                <a href="@Url.Action("Index", "Cart")" class="btn btn-outline-secondary">
                                    <i class="bi bi-arrow-left"></i> Back to Cart
                                </a>
                                <button id="confirmOrderBtn" class="btn btn-brand btn-checkout" @(Model.Addresses == null || !Model.Addresses.Any() ? "disabled" : "")>
                                    Place Order <i class="bi bi-arrow-right"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Alert handling
        function showAlert(message, type) {
            const alertElement = document.getElementById('checkoutAlert');
            const messageElement = document.getElementById('alertMessage');
            const alertIcon = document.querySelector('.checkout-alert-icon i');
            
            // Set message
            messageElement.textContent = message;
            
            // Set type
            alertElement.className = 'checkout-alert';
            alertElement.classList.add(`alert-${type}`);
            
            // Set icon
            if (type === 'success') {
                alertIcon.className = 'bi bi-check-circle';
            } else if (type === 'danger') {
                alertIcon.className = 'bi bi-exclamation-circle';
            } else if (type === 'warning') {
                alertIcon.className = 'bi bi-exclamation-triangle';
            }
            
            // Show alert
            setTimeout(() => {
                alertElement.classList.add('show');
            }, 100);
            
            // Auto-hide after 5 seconds
            if (type !== 'danger') {
                setTimeout(closeAlert, 5000);
            }
        }
        
        function closeAlert() {
            const alertElement = document.getElementById('checkoutAlert');
            alertElement.classList.remove('show');
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            // Address card selection
            const addressRadios = document.querySelectorAll('.address-radio');
            const addressCards = document.querySelectorAll('.address-card');
            
            addressRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    addressCards.forEach(card => card.classList.remove('selected'));
                    this.closest('.address-card').classList.add('selected');
                });
            });
            
            // Order placement
            const confirmOrderBtn = document.getElementById('confirmOrderBtn');
            if (confirmOrderBtn) {
                confirmOrderBtn.addEventListener('click', function() {
                    const selectedAddressId = document.querySelector('input[name="addressId"]:checked')?.value;
                    const btn = this;
                    
                    // Validate address selection
                    if (!selectedAddressId) {
                        showAlert('Please select a shipping address before placing your order.', 'warning');
                        return;
                    }
                    
                    // Confirmation dialog
                    if (!confirm('Are you sure you want to place this order?')) {
                        return;
                    }
                    
                    // Show loading state
                    btn.disabled = true;
                    btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
                    
                    // Get the CSRF token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    
                    // Check internet connection
                    if (!navigator.onLine) {
                        showAlert('You appear to be offline. Please check your internet connection and try again.', 'warning');
                        btn.disabled = false;
                        btn.innerHTML = 'Place Order <i class="bi bi-arrow-right"></i>';
                        return;
                    }
                    
                    // Set up a timeout to abort the request if it takes too long
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30-second timeout
                    
                    // Submit order
                    fetch('@Url.Action("ConfirmOrder", "Cart")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': token
                        },
                        body: `addressId=${selectedAddressId}&__RequestVerificationToken=${token}`,
                        signal: controller.signal
                    })
                    .then(response => {
                        clearTimeout(timeoutId);
                        if (!response.ok) {
                            return response.text().then(text => {
                                try {
                                    // Try to parse as JSON first
                                    return { json: JSON.parse(text), status: response.status };
                                } catch (e) {
                                    // If not JSON, return as text
                                    throw new Error(`Server error (${response.status}): ${text.substring(0, 100)}...`);
                                }
                            });
                        }
                        return response.json().then(data => ({ json: data }));
                    })
                    .then(({ json, status }) => {
                        if (json.success) {
                            showAlert(json.message, 'success');
                            setTimeout(() => {
                                window.location.href = json.redirectUrl || '@Url.Action("Profile", "Account")';
                            }, 1500);
                        } else {
                            showAlert(json.message || 'An error occurred while processing your order.', 'danger');
                            btn.disabled = false;
                            btn.innerHTML = 'Place Order <i class="bi bi-arrow-right"></i>';
                        }
                    })
                    .catch(error => {
                        clearTimeout(timeoutId);
                        console.error('Error during checkout:', error);
                        let errorMessage = 'An error occurred while processing your order. Please try again.';
                        
                        if (error.name === 'AbortError') {
                            errorMessage = 'The request took too long to complete. Please try again.';
                        } else if (!navigator.onLine) {
                            errorMessage = 'You appear to be offline. Please check your internet connection and try again.';
                        } else if (error.message) {
                            console.error('Detailed error:', error.message);
                            // Provide more details for debugging but keep the user message simple
                            if (error.message.includes('status: 500')) {
                                errorMessage = 'There was a server error. Our team has been notified and we\'re working on it.';
                            } else if (error.message.includes('status: 404')) {
                                errorMessage = 'The checkout service is currently unavailable. Please try again later.';
                            } else if (error.message.includes('status: 401') || error.message.includes('status: 403')) {
                                errorMessage = 'Your session may have expired. Please log in again.';
                                // Optionally redirect to login after a delay
                                setTimeout(() => {
                                    window.location.href = '@Url.Action("Index", "Login")';
                                }, 3000);
                            }
                        }
                        
                        showAlert(errorMessage, 'danger');
                        btn.disabled = false;
                        btn.innerHTML = 'Place Order <i class="bi bi-arrow-right"></i>';
                    });
                });
            }
        });
    </script>
}