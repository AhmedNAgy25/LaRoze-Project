@model Graduation_Project.Models.Cart

@{
    ViewData["Title"] = "Your Cart";
}

<div class="container my-5">
    <h2 class="text-center mb-4">@ViewData["Title"]</h2>

    <!-- Display Success or Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Cart Table -->
    @if (Model == null || Model.CartItems == null || !Model.CartItems.Any())
    {
        <div class="col-12 text-center text-muted">
            <p>Your cart is empty.</p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-dark">
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.CartItems)
                    {
                        <tr>
                            <td>@item.Product.Name</td>
                            <td>@item.Product.Price.ToString("C")</td>
                            <td>
                                <input type="number" class="form-control qty-input" value="@item.Quantity" min="1" max="@item.Product.StockQuantity"
                                       data-cartitemid="@item.CartItemId" style="width: 80px;" />
                            </td>
                            <td>@(item.Product.Price * item.Quantity).ToString("C")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-danger remove-btn" data-cartitemid="@item.CartItemId">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="3" class="text-end fw-bold">Total:</td>
                        <td>@Model.CartItems.Sum(ci => ci.Product.Price * ci.Quantity).ToString("C")</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>
        <div class="d-flex justify-content-end">
            <a asp-controller="Home" asp-action="Index" class="btn btn-outline-secondary me-2">Continue Shopping</a>
            <a asp-controller="Cart" asp-action="Checkout" class="btn btn-primary">Proceed to Checkout</a>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const qtyInputs = document.querySelectorAll('.qty-input');
            const removeButtons = document.querySelectorAll('.remove-btn');

            qtyInputs.forEach(input => {
                input.addEventListener('change', function () {
                    const cartItemId = this.getAttribute('data-cartitemid');
                    const quantity = this.value;
                    fetch('/Cart/UpdateQuantity', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: `cartItemId=${cartItemId}&quantity=${quantity}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload(); // Reload to update totals
                        } else {
                            alert(data.message);
                            location.reload();
                        }
                    });
                });
            });

            removeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const cartItemId = this.getAttribute('data-cartitemid');
                    fetch('/Cart/RemoveFromCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: `cartItemId=${cartItemId}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            location.reload(); // Reload to update cart
                        } else {
                            alert(data.message);
                        }
                    });
                });
            });
        });
    </script>
}